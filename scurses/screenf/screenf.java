/*
 * screenf, as of old.  Yeah, I used lower case.
 * 
 * Usage:
 *     java < foo.screen
 *
 * I do that as "!!java < foo.screen" within vi.  A "screen" file contains
 * text to make up a scren, and a "&p" where you want a varible put field, 
 * and a &g where you want a variable get field.  See Screen.java.
 **/

import java.io.IOException;
import java.text.DateFormat;
import java.util.Date;
import java.util.ArrayList;

public class screenf {


    private static class Field {
	public int y;
	public int x;
	public String value = "";
	public int minLength = 0;
    }

    private static int putback = -1;	// for  ungetc()
    private static int y = 0;
    private static int x = 0;

    private static int getc() throws IOException {
	if (putback != -1) {
	    int c = putback;
	    putback = -1;
	    return c;
	}
	return System.in.read();
    }

    private static void ungetc(int c) {
	assert(putback == -1);
	putback = c;	// Can be -1
    }

    public static Field handleFixed() throws IOException {
	Field f = new Field();
	f.x = x;
	f.y = y;
	f.minLength = 0;
	f.value = "";
	for (;;) {
	    int ch = getc();
	    if (ch == '\\') {
		ch = getc();
		if (ch < ' ' || ch >= 127) {
		    throw new IOException("Character " + ch + " unexpected after \"\\\"");
		}
	    } else if (ch == '&' || ch < ' ' || ch >= 127) {
		ungetc(ch);
		break;
	    }
	    f.value = f.value + ((char) ch);
	    x++;
	    if (f.value.trim().length() + 10 < f.value.length()) {
		break;
	    }
	}
	f.value = f.value.trim();
	return f;
    }

    public static Field handleGet(int minLength) throws IOException {
	Field f = new Field();
	f.y = y;
	f.x = x;
	x += 2;		// for "&g"
	int ch = getc();
	if (ch == '_') {
	    f.minLength += 2;		// For the space taken by the &g
	}
	while (ch == '_') {
	    x++;
	    f.minLength++;
	    ch = getc();
	}
	ungetc(ch);
	if (f.minLength < minLength) {
	    f.minLength = minLength;
	}
	return f;
    }

    public static Field handlePut() {
	Field f = new Field();
	f.y = y;
	f.x = x;
	x += 2;		// for "&p"
	return f;
    }

    private static String quoted(String s) {
	String result = "\"";
	for (int i = 0; i < s.length(); i++) {
	    char c = s.charAt(i);
	    if (c == '"') {
		result = result + '\\';
	    }
	    result = result + c;
	}
	result = result + '"';
	return result;
    }

    private static void outputPuts(ArrayList<Field> fields) {
	System.out.print("            new Field[] {");
	for (int i = 0; i < fields.size(); i++) {
	    Field f = fields.get(i);
	    if (i == 0) {
		System.out.println();
	    } else {
		System.out.println(",");
	    }
	    System.out.print("                Field.makePut("
		    + f.y + ", " + f.x + ", " + quoted(f.value)
		    + ")");
	}
	System.out.println();
	System.out.print("            }");
    }

    private static void outputGets(ArrayList<Field> fields) {
	System.out.print("            new Field[] {");
	for (int i = 0; i < fields.size(); i++) {
	    Field f = fields.get(i);
	    if (i == 0) {
		System.out.println();
	    } else {
		System.out.println(",");
	    }
	    System.out.print("                Field.makeGet("
		    + f.y + ", " + f.x + ", " + f.minLength + ")");
	}
	System.out.println();
	System.out.print("            }");
    }

    public static void main(String[] args) throws IOException {
	ArrayList<Field> fixedFields = new ArrayList<Field>();
	ArrayList<Field> putFields = new ArrayList<Field>();
	ArrayList<Field> getFields = new ArrayList<Field>();

	for (;;) {
	    int ch = getc();
	    if (ch == -1) {
		break;
	    } else if (ch == '\n') {
		x = 0;
		y++;
	    } else if (ch == ' ') {
		x++;
	    } else if (ch == '&') {
		ch = getc();
		if (ch == 'p') {
		    putFields.add(handlePut());
		} else if (ch == 'g') {
		    getFields.add(handleGet(1));
		} else if (ch == 'G') {
		    getFields.add(handleGet(2));
		} else {
		    throw new IOException("Character " + ch + " unexpected after \"&\"");
		}
	    } else if (ch == 13) {
		// ignore ^M
	    } else if (ch < ' ' || ch >= 127) {
		throw new IOException("Character " + ch + " unexpected.");
	    } else {
		ungetc(ch);
		fixedFields.add(handleFixed());
	    }
	}
	System.out.print("        = new Screen(      // Generated by screenf ");
	System.out.println(DateFormat.getDateInstance(DateFormat.LONG)
		    .format(new Date(System.currentTimeMillis())));
	outputPuts(fixedFields);
	System.out.println(",");
	outputPuts(putFields);
	System.out.println(",");
	outputGets(getFields);
	System.out.println();
	System.out.println("        );");
	System.out.println();
    }
}
